generator client {
  provider = "prisma-client-js"
  
 //output = "../src/generated/prisma"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ApplicationStatus {
  SAVED
  APPLIED
  OA
  INTERVIEW
  OFFER
  REJECTED
  WITHDRAWN
}

enum InterviewType {
  PHONE
  TECHNICAL
  BEHAVIORAL
  ONSITE
  OTHER
}

model User {
  id            String    @id @default(cuid())
  passwordHash  String?   @db.Text
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  applications Application[]
  contacts     Contact[]
  createdAt    DateTime      @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id        String    @id @default(cuid())
  name      String
  website   String?
  location  String?
  jobs      Job[]
  contacts  Contact[]
  createdAt DateTime  @default(now())

  @@unique([name, location])
}

model Job {
  id           String        @id @default(cuid())
  title        String
  level        String?
  location     String?
  salaryMin    Int?
  salaryMax    Int?
  url          String?
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String
  applications Application[]
  createdAt    DateTime      @default(now())
}

model Application {
  id         String            @id @default(cuid())
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  job        Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      String
  status     ApplicationStatus @default(SAVED)
  source     String?
  resumeUrl  String?
  coverUrl   String?
  notes      Note[]
  activities Activity[]
  nextAction String?
  dueAt      DateTime?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@index([userId, status])
}

model Note {
  id            String      @id @default(cuid())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  body          String
  createdAt     DateTime    @default(now())
}

model Activity {
  id            String         @id @default(cuid())
  application   Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  kind          String
  interviewType InterviewType?
  at            DateTime       @default(now())
  details       String?
}

model Contact {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  name      String
  role      String?
  email     String?
  phone     String?
  notes     String?
}
